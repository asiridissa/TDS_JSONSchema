@page
@using Newtonsoft.Json.Schema
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@model IndexModel
@{
    ViewData["Title"] = "TDS Validator : By RideScheduler";
    (bool?, List<ValidationError>) validation = ((bool?, List<ValidationError>))(ViewData["Validation"] ?? ((bool?)null, new List<ValidationError>()));
    string schemaJson = JSON.GetSchema();
    JToken json = JToken.Parse(schemaJson);
    var title = json["title"].Value<string>();
    var description = json["description"].Value<string>();
}
<style>
    .CodeMirror {
        border: 1px solid #cccccc;
        border-radius: 5px;
        min-height: 500px;
    }
</style>
<form method="post" asp-page-handler="Download">
    <div style="text-align: right"><button class="btn btn-link" type="submit">Download</button></div>
</form>
<form method="post">
    <div class="text-center">
        <table style="width: 100%;">
            <tr >
                <td rowspan="2" >
                    <h1 class="display-4" style="white-space: nowrap;">TDS Validator</h1>
                </td>
                <td><h5 title="@description">@title</h5></td>
            </tr>
            <tr >
                <td >
                    <p style="text-align: justify; margin-left: 10px;">
                        The TDS validator was developed by RideScheduler for the RideNoCo coordination project. That coordination project was a collaborative effort between the North Front Range Metropolitan Planning Organization (NFRMPO), RideScheduler, RideSheet, Spedsta and TransitPlus. The validator tool utilizes the <a href="https://github.com/RideNoCo/drt-tds/blob/main/spec/schema.json" target="_blank" title="View schema.json">RideNoCo TDS schema</a> which is based on the XML Schema from tcrp.demandtrans.com_TCRPSchema.
                    </p>
                </td>
            </tr>
        </table>
    </div>
    <textarea id="code" name="code" class="border-dark">@ViewData["Code"]</textarea>
    <div style="text-align: right; margin: 10px 0;">
        <button type="submit" class="btn btn-lg btn-primary ">Validate</button>
        <a class="btn btn-lg btn-outline-danger" href="~/">Reset</a>
    </div>
</form>

@functions
{
    string GetValidateWrapperClass(bool? valid)
    {
        return valid switch
        {
            true => "alert-success",
            false => "alert-danger",
            _ => ""
        };
    }

    string GetValidateTitle(bool? valid)
    {
        return valid switch
        {
            true => "<h4>Valid JSON</h4>",
            false => "<h4>Validation Failed</h4>",
            _ => ""
        };
    }


    void BuildMessage(ValidationError i)
    {
        Type? valTtype = i?.Value?.GetType();
        <li>
            <div>@i.SchemaId @i.ErrorType (Line @i.LineNumber, Pos @i.LinePosition)</div>
            <div style="margin-left: 20px"><b>@i.Message</b></div>
            <div style="margin-left: 40px">
                @i.Path:
                @switch (true)
                {
                    case true when valTtype == typeof(List<string>):
                        <span>@JsonConvert.SerializeObject(i.Value)</span>
                        break;
                    default:
                        <span>@i.Value?.ToString()</span>
                        break;
                }
            </div>
        </li>
    }
}

<div class="alert @GetValidateWrapperClass(validation.Item1)">
    @Html.Raw(GetValidateTitle(validation.Item1))
    <ul>
        @foreach (var i in validation.Item2)
        {
            BuildMessage(i);
        }
    </ul>
</div>

<script>
    var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
        lineNumbers: true,
        matchBrackets: true,
        continueComments: "Enter",
        mode: "JSON",
        extraKeys: { "Ctrl-Q": "toggleComment" }
    });
</script>